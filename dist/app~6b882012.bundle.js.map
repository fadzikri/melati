{"version":3,"file":"app~6b882012.bundle.js","mappings":";6IAUA,QANe,CACb,IAAKA,EAAAA,EACL,cAAeC,EAAAA,EACf,aAAcC,EAAAA,mCCuBhB,QA9BkB,CAChBC,2BAA0B,WACxB,IAAMC,EAAMC,OAAOC,SAASC,KAAKC,MAAM,GAAGC,cACpCC,EAAaC,KAAKC,aAAaR,GACrC,OAAOO,KAAKE,aAAaH,EAC3B,EAEAI,8BAA6B,WAC3B,IAAMV,EAAMC,OAAOC,SAASC,KAAKC,MAAM,GAAGC,cAC1C,OAAOE,KAAKC,aAAaR,EAC3B,EAEAQ,aAAY,SAACR,GACX,IAAMW,EAAaX,EAAIY,MAAM,KAC7B,MAAO,CACLC,SAAUF,EAAW,IAAM,KAC3BG,GAAIH,EAAW,IAAM,KACrBI,KAAMJ,EAAW,IAAM,KAE3B,EAEAF,aAAY,SAACH,GACX,OACGA,EAAWO,SAAW,IAAH,OAAOP,EAAWO,UAAa,MAClDP,EAAWQ,GAAK,OAAS,KACzBR,EAAWS,KAAO,IAAH,OAAOT,EAAWS,MAAS,GAE/C,+CC1BIC,EAAQ,gQCAd,8lGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBAEA,IAAMC,GAAYC,EAAAA,EAAAA,IDHH,SCGkB,EAAG,CAClCC,QAAO,SAACC,GACNA,EAASC,kBAAkBN,EAAO,CAAEO,QAAS,MAC/C,IAkBF,QAfoB,CACZC,cAAa,SAACV,GAAI,iHACRI,EAAS,uCAAEO,IAAIT,EAAOF,IAAE,0CADhB,EAExB,EACMY,kBAAiB,WAAG,iHACVR,EAAS,uCAAES,OAAOX,IAAK,0CADb,EAE1B,EACMY,cAAa,SAACC,GAAO,iHACXX,EAAS,uCAAEY,IAAId,EAAOa,IAAK,0CADhB,EAE3B,EACME,cAAa,SAACjB,GAAI,iHACRI,EAAS,8CAASF,EAAOF,IAAE,0CADnB,EAExB,4SCpBF,sgOAyBA,QArBe,yBAJf,4FAIe,SAJf,YAIe,EAkBZ,OAtBH,EAIe,EAJf,EAIe,KAJf,EAIe,qBAJf,EAIe,UACb,WAAmBkB,GAAQ,uFACFC,EAAAA,EAAAA,IAChB,GAAD,OAAIC,EAAAA,EAAAA,cAAoB,YAAIF,IAC/BG,MAAK,SAACC,GACL,MAAiB,SAAbJ,EACKI,EAAIC,KAAKC,YAETF,EAAIC,KAAKE,UAEpB,IAAE,OACK,SAACC,GACN,GAAiB,gBAAbA,EAAIC,KACN,OAAO,CAEX,IAAE,OAbU,OAARC,EAAW,EAAH,uBAePA,GAAQ,0CAjBJ,EAJf,8KAsBG,+CAtBH,iFAsBG,EAlBY,mCCAf,QALe,CACbC,cAAe,sCACfC,eAAgB","sources":["webpack://melati/./src/routers/routes.js","webpack://melati/./src/routers/url-parser.js","webpack://melati/./src/scripts/global/database.js","webpack://melati/./src/scripts/data/dbi.js","webpack://melati/./src/scripts/data/list-datas.js","webpack://melati/./src/scripts/global/config.js"],"sourcesContent":["import lists from \"../scripts/views/pages/card\";\nimport detail from \"../scripts/views/pages/detail\";\nimport favourite from \"../scripts/views/pages/favourite\";\n\nconst routes = {\n  \"/\": lists,\n  \"/detail/:id\": detail,\n  \"/favourite\": favourite,\n};\n\nexport default routes;\n","const UrlParser = {\n  parseActiveUrlWithCombiner() {\n    const url = window.location.hash.slice(1).toLowerCase();\n    const splitedUrl = this._urlSplitter(url);\n    return this._urlCombiner(splitedUrl);\n  },\n\n  parseActiveUrlWithoutCombiner() {\n    const url = window.location.hash.slice(1).toLowerCase();\n    return this._urlSplitter(url);\n  },\n\n  _urlSplitter(url) {\n    const urlsSplits = url.split(\"/\");\n    return {\n      resource: urlsSplits[1] || null,\n      id: urlsSplits[2] || null,\n      verb: urlsSplits[3] || null,\n    };\n  },\n\n  _urlCombiner(splitedUrl) {\n    return (\n      (splitedUrl.resource ? `/${splitedUrl.resource}` : \"/\") +\n      (splitedUrl.id ? \"/:id\" : \"\") +\n      (splitedUrl.verb ? `/${splitedUrl.verb}` : \"\")\n    );\n  },\n};\n\nexport default UrlParser;\n","const dbName = \"melati\";\nconst store = \"restaurant\";\n\nexport { dbName, store };\n","import { openDB } from \"idb\";\nimport { dbName, store } from \"../global/database\";\n\nconst dbPromise = openDB(dbName, 1, {\n  upgrade(database) {\n    database.createObjectStore(store, { keyPath: \"id\" });\n  },\n});\n\nconst operationDb = {\n  async getRestaurant(id) {\n    return (await dbPromise).get(store, id);\n  },\n  async getAllRestaurants() {\n    return (await dbPromise).getAll(store);\n  },\n  async putRestaurant(datas) {\n    return (await dbPromise).put(store, datas);\n  },\n  async delRestaurant(id) {\n    return (await dbPromise).delete(store, id);\n  },\n};\n\nexport default operationDb;\n","/* eslint-disable no-useless-return */\n/* eslint-disable n/handle-callback-err */\nimport axios from \"axios\";\nimport config from \"../global/config\";\n\nclass ListDatas {\n  static async datas(endpoint) {\n    const response = await axios\n      .get(`${config.BASE_DATA_URL}/${endpoint}`)\n      .then((res) => {\n        if (endpoint === \"list\") {\n          return res.data.restaurants;\n        } else {\n          return res.data.restaurant;\n        }\n      })\n      .catch((err) => {\n        if (err.code === \"ERR_NETWORK\") {\n          return false;\n        }\n      });\n\n    return response;\n  }\n}\n\nexport default ListDatas;\n","const config = {\n  BASE_DATA_URL: \"https://restaurant-api.dicoding.dev\",\n  BASE_IMAGE_URL: \"https://restaurant-api.dicoding.dev/images/medium\",\n};\n\nexport default config;\n"],"names":["lists","detail","favourite","parseActiveUrlWithCombiner","url","window","location","hash","slice","toLowerCase","splitedUrl","this","_urlSplitter","_urlCombiner","parseActiveUrlWithoutCombiner","urlsSplits","split","resource","id","verb","store","i","dbPromise","openDB","upgrade","database","createObjectStore","keyPath","getRestaurant","get","getAllRestaurants","getAll","putRestaurant","datas","put","delRestaurant","endpoint","axios","config","then","res","data","restaurants","restaurant","err","code","response","BASE_DATA_URL","BASE_IMAGE_URL"],"sourceRoot":""}